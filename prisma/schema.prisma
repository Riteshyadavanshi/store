// This is   Prisma schema file,

generator client {
  provider = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

model User {
  id           String    @id @default(uuid()) @map("_id")
  mobileNumber String    @unique
  order        Order[]
  createdAt DateTime @default(now())
}

 
model Category {
  id String @id @default(uuid()) @map("_id")

  name        String
  subCategory SubCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model SubCategory {
  id String @id @default(uuid()) @map("_id")

  name       String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

model Product {
  id            String      @id @default(uuid()) @map("_id")
  name          String
  description   String
  price         Int
  subCategoryId String
 
  otherPrice     Int  
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  orderItem     OrderItem[]
  images        Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

 
model Image {
  id        String  @id @default(uuid()) @map("_id")
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  imageUrl  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Order {
  id           String @id @default(uuid()) @map("_id")
  name         String
  mobileNumber String
  email        String
  address      String
  pinCode      String
  userId       String
  total        Int 
  user          User  @relation(fields: [userId],references: [id],onDelete:Cascade)
  items     OrderItem[]
  isPaid    Boolean     @default(false)
  status    String      @default("order placed")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid()) @map("_id")
  quantity  Int
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}
